#include <stdio.h>
#include "em_device.h"
#include "em_cmu.h"
#include "em_chip.h"
#include "bsp.h"

#include "display.h"
#include "textdisplay.h"
#include "retargettextdisplay.h"
#include "rtcdriver.h"
#include "i2cspm.h"
#include "si7013.h"
#include "si114x_algorithm.h"
#include "em_adc.h"
#include "em_emu.h"
#include "si1147_i2c.h"

//=================================VARIABLES, DEFINES============================================

#define PERIODIC_UPDATE_MS 10
#define DEBOUNCE_MILLISEC 300

#define Button0Push GPIO_PinInGet(BSP_GPIO_PB0_PORT, BSP_GPIO_PB0_PIN)==0 //Buton 0 apasat
#define Button1Push GPIO_PinInGet(BSP_GPIO_PB1_PORT, BSP_GPIO_PB1_PIN)==0 //Buton 1 apasat
#define Button0Pull GPIO_PinInGet(BSP_GPIO_PB0_PORT, BSP_GPIO_PB0_PIN)==1 //Buton 0 ridicat
#define Button1Pull GPIO_PinInGet(BSP_GPIO_PB1_PORT, BSP_GPIO_PB1_PIN)==1 //Buton 1 ridicat

#define Led0Aprins GPIO_PinOutSet(gpioPortC,10);
#define Led1Aprins GPIO_PinOutSet(gpioPortC,11);
#define Led0Stins  GPIO_PinOutClear(gpioPortC,10);
#define Led1Stins GPIO_PinOutClear(gpioPortC,11);

/** Time (in ms) to keep looking for gestures if none are seen. */
#define GESTURE_TIMEOUT_MS      60000
/** Time (in ms) between periodic updates of the measurements. */
#define PERIODIC_UPDATE_MS      2000
/** Time (in ms) between scrolling updates. Lower means faster scrolling
 *  between screens. */
#define ANIMATION_UPDATE_MS     50
/** Voltage defined to indicate dead battery. */
#define LOW_BATTERY_THRESHOLD   2800

volatile uint32_t msTicks; /* counts 1ms timeTicks */
static volatile bool adcConversionComplete = false;
static si114x_i2c_t si114x_i2c;
static si114x_i2c_t *si114x_handle = &si114x_i2c;

/** Timer used for timing out gesturemode to save power. */
RTCDRV_TimerID_t gestureTimeoutTimerId;
/** Timer used for counting milliseconds. Used for gesture detection. */
RTCDRV_TimerID_t millisecondsTimerId;
/** Timer used for periodic update of the measurements. */
RTCDRV_TimerID_t periodicUpdateTimerId;
/** Timer used for animations (swiping) */
RTCDRV_TimerID_t animationTimerId;
RTCDRV_TimerID_t perioicTimmerId;
I2CSPM_Init_TypeDef i2cInit = I2CSPM_INIT_DEFAULT;

uint32_t rhData;
bool si7013_status,
si1147_status;
int32_t tempData;
uint16_t uvData;
uint32_t         vBat = 3300;
ADC_Init_TypeDef init = ADC_INIT_DEFAULT;
ADC_InitSingle_TypeDef initSingle = ADC_INITSINGLE_DEFAULT;
Si114x_Sample_TypeDef sample;
uint32_t timestamp;
gesture_t gest = NONE;
uint32_t cnt;
uint32_t cnt1;
int objectDetect;
int minTemp = 22;
int maxTemp = 30;

//==================================Local prototypes=================================================

void setup();
void periodicCallback();
void Button0PushEvent();
void Button1PushEvent();
static void adcInit(void);
void SysTick_Handler(void);
void TemperatureTreshHold();
void Delay(uint32_t dlyTicks);
static void enableGestureMode(void);
static void enableGestureMode(void);
static void msTicksCallback(RTCDRV_TimerID_t id, void *user);
static void disableGestureMode(RTCDRV_TimerID_t id, void *user);
void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample);
static int performMeasurements(uint32_t *rhData, int32_t *tData, uint16_t *uvData, int *objectDetect);
//=============================================================================================
// MAIN

int main(void)
{
	setup();


	while(1)
	{
		ProblemaC3();
		Delay(1000);
	}
	return 0;
}


//====================================FUNCTIONS IMPLEMENTATION=========================================================


void periodicCallback()
{
	//ProblemaC1();
	//ProblemaC2();
	//ProblemaC3();
}

//------------------------- PROBLEMA C1 ---------------------------


void ProblemaC1()
{
	Button0PushEvent();
	Button1PushEvent();
}


void Button0PushEvent()
{

	if(Button0Push)
	{
		cnt1++;
		if(cnt1 >= DEBOUNCE_MILLISEC)
		{
			Led0Aprins;
			cnt1 = 0;
		}
	}
	else
	{
		cnt1++;
		if(cnt1 >= DEBOUNCE_MILLISEC)
		{
			Led0Stins;
			cnt1 = 0;
		}
	}
}


void Button1PushEvent()
{

	if(Button1Push)
	{
		cnt++;
		if(cnt >= DEBOUNCE_MILLISEC)
		{
			Led1Aprins;
			cnt = 0;
		}
	}
	else
	{
		cnt++;
		if(cnt >= DEBOUNCE_MILLISEC)
		{
			Led1Stins;
			cnt = 0;
		}
	}
}

//------------------------- PROBLEMA C2 ---------------------------

void ProblemaC2()
{

	performMeasurements(&rhData, &tempData, &uvData, &objectDetect);
	Hysteresys();
	DisplayTemperature();
	TemperatureTreshHold();
}

void DisplayTemperature()
{

	int fahrenheitTemp = ((tempData * (9.0 / 5.0)) + 32.0); //celsius to fahrenhit transform function
	printf("\n\t Practica Arobs 2017");
	printf("\nCelsius: %d", tempData / 1000); //Temperatura celsius
	printf("\nFarenhight: %d", fahrenheitTemp / 1000); //Temperatura fahrenhit
	printf("\nUmiditatea: %d", rhData/1000); //Umiditatea
	printf("\nUV: %d", uvData); //Cantitatea de radiatii UV
	printf("\n\nPraguri %d, %d",minTemp, maxTemp );
	//printf("\n\nBaterie :%d", vBat); //Baterie
}

void TemperatureTreshHold() 
{
	if (tempData / 1000<=minTemp )
	{
		Led0Aprins;
	}
	else if (tempData / 1000 >= maxTemp )
	{
		Led1Aprins;
	}
	else 
	{
		Led0Stins;
		Led0Stins;
	}
}

void Hysteresys()
{

	if(Button0Push)
	{
		minTemp = minTemp+ 1;
		maxTemp = maxTemp+ 1;
	}
	else if(Button1Push)
	{
		maxTemp = maxTemp - 1;
		minTemp = minTemp - 1;
	}

}

//-------------------PROBLEMA C3 Citire si afisare senzori-----------
void ProblemaC3()
{
	ReadSensorsData();
}

 void ReadSensorsData()
{
	si114x_handle->addr = SI1147_ADDR;
	si114x_handle->i2c  = I2C0;
	sample.timestamp    = msTicks;

	if (GPIO_PinInGet(gpioPortD, 5) == 0)
			{
				enableGestureMode();
				readPSData(si114x_handle, &sample);
				/*clear irq*/
				Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, Si114xReadFromRegister(si114x_handle, REG_IRQ_STATUS));
				/*look for gestures */
			}
	//		gest = ProcessSi1147Samples(&sample);

			printf("\f");
			printf("\nSenzor1Data %d", sample.ps1);
			printf("\nSenzor2Data %d", sample.ps2);
			printf("\nSenzor3Data %d", sample.ps3);
	//		printf ("\gesture direction: %d", gest);
}

void readPSData(HANDLE si114x_handle, Si114x_Sample_TypeDef *sample)
{
  /*read sample data from si114x */
  sample->ps1  = Si114xReadFromRegister(si114x_handle, REG_PS1_DATA0);
  sample->ps1 |= Si114xReadFromRegister(si114x_handle, REG_PS1_DATA1) << 8;

  sample->ps2  = Si114xReadFromRegister(si114x_handle, REG_PS2_DATA0);
  sample->ps2 |= Si114xReadFromRegister(si114x_handle, REG_PS2_DATA1) << 8;

  sample->ps3  = Si114xReadFromRegister(si114x_handle, REG_PS3_DATA0);
  sample->ps3 |= Si114xReadFromRegister(si114x_handle, REG_PS3_DATA1) << 8;


}

static void disableGestureMode(RTCDRV_TimerID_t id, void *user)
{
  (void) id;
  (void) user;
  Si1147_ConfigureDetection(I2C0, SI1147_ADDR, true);

  /* Stop counting milliseconds */
  RTCDRV_StopTimer(millisecondsTimerId);
  /* Increment timer an arbitrary amount of time to account for timer stopping*/
  msTicks += 1000;
//  demoMode = false;
  /* This timer runs the animations. E.g if an animation is
   * active this will retrigger a redraw. */
  RTCDRV_StopTimer(animationTimerId);
}

static void enableGestureMode(void)
{
  Si1147_ConfigureDetection(I2C0, SI1147_ADDR, false);
  Si1147_SetInterruptOutputEnable(I2C0, SI1147_ADDR, true);

  /* Start timer to disable gestures */
  RTCDRV_StartTimer(gestureTimeoutTimerId, rtcdrvTimerTypeOneshot,
                    GESTURE_TIMEOUT_MS, disableGestureMode, NULL);
  /* Start timer to count milliseconds - used for gesture detection */
  RTCDRV_StartTimer(millisecondsTimerId, rtcdrvTimerTypePeriodic,
                    5, msTicksCallback, NULL);
}
//---------------------------------------------------------------------
static void msTicksCallback(RTCDRV_TimerID_t id, void *user)
{
  (void) id;
  (void) user;
  msTicks += 5;
}

//---------------------------------------------------------------------
static void adcInit(void) 
{
	ADC_Init_TypeDef init = ADC_INIT_DEFAULT;
	ADC_InitSingle_TypeDef initSingle = ADC_INITSINGLE_DEFAULT;

	/* Enable ADC clock */
	CMU_ClockEnable(cmuClock_ADC0, true);

	/* Initiate ADC peripheral */
	ADC_Init(ADC0, &init);

	/* Setup single conversions for internal VDD/3 */
	initSingle.acqTime = adcAcqTime16;
	initSingle.input = adcSingleInpVDDDiv3;
	ADC_InitSingle( ADC0, &initSingle);

	/* Manually set some calibration values */
	ADC0->CAL = (0x7C << _ADC_CAL_SINGLEOFFSET_SHIFT)
			| (0x1F << _ADC_CAL_SINGLEGAIN_SHIFT);

	/* Enable interrupt on completed conversion */
	ADC_IntEnable(ADC0, ADC_IEN_SINGLE);
	NVIC_ClearPendingIRQ(ADC0_IRQn);
	NVIC_EnableIRQ(ADC0_IRQn);
}

//---------------------------------------------------------------------
static int performMeasurements(uint32_t *rhData, int32_t *tData, uint16_t *uvData, int *objectDetect)
{
	//*vBat = checkBattery();
	Si7013_MeasureRHAndTemp(I2C0, SI7013_ADDR, rhData, tData);
	Si1147_MeasureUVAndObjectPresent(I2C0, SI1147_ADDR, uvData, objectDetect);
	return 0;
}

//---------------------------------------------------------------------
void Delay(uint32_t dlyTicks)
{
	uint32_t curTicks;
	curTicks = msTicks;
	while ((msTicks - curTicks) < dlyTicks);
}

//-----------------------------------------------------------------------

void SysTick_Handler(void) 
{
	msTicks++; /* increment counter necessary in Delay()*/
}

//-----------------------------------------------------------------------

void setup()
 {
	/* Chip errata */
	CHIP_Init();
	adcInit();
	BSP_Init(BSP_INIT_DEFAULT);
	BSP_LedsInit();

	/* Use 48MHZ HFXO as core clock frequency */
	CMU_ClockSelectSet(cmuClock_HF, cmuSelect_HFXO);

	/* Initialize DK board register access */
	/* This demo currently only works in EBI mode */

	/* Setup SysTick Timer for 10 msec interrupts  */
	if (SysTick_Config(CMU_ClockFreqGet(cmuClock_CORE) / 1000))
	{
		while (1);
	}

	/* Initialize the display module. */
	DISPLAY_Init();

	/* Retarget stdio to a text display. */
	if (RETARGET_TextDisplayInit() != TEXTDISPLAY_EMSTATUS_OK)
	{
		while (1);
	}

	CMU_ClockEnable(cmuClock_GPIO, true);

	/* Configure PB0 as input and enable interrupt  */
	GPIO_PinModeSet(BSP_GPIO_PB0_PORT, BSP_GPIO_PB0_PIN, gpioModeInputPull, 1);

	/* Configure PB1 as input and enable interrupt */
	GPIO_PinModeSet(BSP_GPIO_PB1_PORT, BSP_GPIO_PB1_PIN, gpioModeInputPull, 1);

	GPIO_PinModeSet(gpioPortC, 10, gpioModePushPull, 0);
	GPIO_PinModeSet(gpioPortC, 11, gpioModePushPull, 0);

	RTCDRV_Init();
	RTCDRV_AllocateTimer(&perioicTimmerId);
	RTCDRV_StartTimer(perioicTimmerId, rtcdrvTimerTypePeriodic,PERIODIC_UPDATE_MS, periodicCallback, NULL);
	/* Initialize I2C driver, using standard rate. */

	I2CSPM_Init(&i2cInit);

	si7013_status = Si7013_Detect(I2C0, SI7013_ADDR, NULL);
	si1147_status = Si1147_Detect_Device(I2C0, SI1147_ADDR);
	//GRAPHICS_ShowStatus(si1147_status, si7013_status, false, false);
	/*configure prox sensor to enter low power state*/
	Si1147_ConfigureDetection(I2C0, SI1147_ADDR, true);

}

//------------------------------------------------------------------------
